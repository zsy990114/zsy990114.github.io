<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>js事件冒泡</title>
    <url>/2020/03/17/js%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
    <content><![CDATA[<p>气泡会从水底向上移动到水面，这就是冒泡。Javascript中的冒泡机制就是将事件当作气泡，由内而外冒出去。</p>
<h2 id="1、事件的发生过程"><a href="#1、事件的发生过程" class="headerlink" title="1、事件的发生过程"></a>1、事件的发生过程</h2><p>一个事件从发生到执行有三个过程：</p>
<p>1.事件的捕获阶段：从外到内</p>
<p>2.事件的目标阶段：目标元素本身</p>
<p>3.事件的冒泡阶段：从内向外</p>
<p>为了解释这个问题，我们来举个例子：</p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/js事件冒泡/1.png" alt="事件触发"></p>
<p>当我们点击div2时，首先会进入事件的捕获阶段：</p>
<p>先由外到里来找事件的真正触发者，操作系统–&gt;对应应用程序–&gt;window–&gt;body–&gt;div1–&gt;div2；</p>
<p>再到事件的第二阶段：确定事件的真正触发者是div2；</p>
<p>最后来到事件的冒泡阶段：由内向外传递事件（顺序与捕获阶段相反）和真正触发者对象（后文简称为 触发对象），执行div2中的onclick事件后，在向他的父亲元素传递事件和对象，若父亲元素存在onclick事件则执行；再继续向上传递事件和对象，以此内推知道无父亲元素为止。</p>
<p>注：关于事件的捕获阶段和事件的冒泡阶段可以用以下函数来模拟</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 目标元素. addEventListener(操作,绑定的函数,boolean);</span><br><span class="line">element.addEventListener(&#39;click&#39;,function()&#123;&#125;,true);  &#x2F;&#x2F;捕获阶段</span><br><span class="line">element.addEventListener(&#39;click&#39;,function()&#123;&#125;,false); &#x2F;&#x2F;冒泡阶段</span><br></pre></td></tr></table></figure>

<p>要切实说明这个问题，我们来看一个例子：</p>
<p>css代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#red &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">#yellow &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">#blue &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTML代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;red&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;yellow&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;blue&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>Javascript代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var red &#x3D; GEBID$(&#39;red&#39;);</span><br><span class="line">var yellow &#x3D; GEBID$(&#39;yellow&#39;);</span><br><span class="line">var blue &#x3D; GEBID$(&#39;blue&#39;);</span><br><span class="line"></span><br><span class="line">blue.onclick &#x3D; function(e)&#123;  &#x2F;&#x2F;这里的 e 便是触发事件（点击事件）</span><br><span class="line">    console.log(&#39;蓝色&#39;);</span><br><span class="line">    console.log(e.target);  &#x2F;&#x2F;e.target  触发事件的对象元素（触发对象）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*yellow.onclick &#x3D; function(e)&#123;</span><br><span class="line">    console.log(&#39;黄色&#39;);</span><br><span class="line">    console.log(e.target);</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">red.onclick &#x3D; function(e)&#123;</span><br><span class="line">    console.log(&#39;红色&#39;);</span><br><span class="line">    console.log(e.target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/js事件冒泡/2.png" alt="界面预览"></p>
<p><a href="https://howlcn1997.github.io/2019/09/27/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E7%9A%84%E5%86%92%E6%B3%A1%E6%9C%BA%E5%88%B6/%E7%95%8C%E9%9D%A2%E9%A2%84%E8%A7%88.png">界面预览</a></p>
<p>当我们点击blue时，bule的onclick被触发，查看blue中是否有onclik事件，若有则执行输出语句，执行结束后会根据冒泡机制向上一层传递事件和触发对象至yellow，但此时yellow中并未绑定onclick事件，所以不执行输出语句，继续向上传递；到red后，由于red绑定了onclick事件，则执行输出语句；在传递给body……控制台结果如下：</p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/js事件冒泡/3.png" alt="执行结果"></p>
<p>我们发现：虽然red也执行了它自身的事件函数，但是触发对象却仍然是blue。这是因为虽然我们没有点击red，但是我们点击了blue，而blue会将这一点击信号通过冒泡机制向上传递，传递过程中只要遇到绑定有onclick事件的元素便会触发其事件函数，但这沿路走过的一直都是我们最初所点击的那位始作俑者。</p>
<p><strong>值得注意的是：</strong></p>
<p>1.当我们点击blue而触发事件，并引发冒泡机制后，yellow和red所执行的 <strong>element.onclick = function(e){}</strong> 中的e所代表的事件是同一个事件，是由blue通过冒泡机制传递过来的。</p>
<p>2.只要没有阻止冒泡机制或者说冒泡机制生效，无论当前元素是否绑定onclick事件，它都会向上传递点击事件。</p>
<h2 id="2、如何阻止冒泡机制"><a href="#2、如何阻止冒泡机制" class="headerlink" title="2、如何阻止冒泡机制"></a>2、如何阻止冒泡机制</h2><p>当我们需要点击blue而不触发其祖先元素的事件时，我们只需要在blue的事件函数中加入以下代码即可（已做了兼容性处理）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function stopBubble(e) &#123; </span><br><span class="line">&#x2F;&#x2F;如果提供了事件对象，则这是一个非IE浏览器 </span><br><span class="line">if ( e &amp;&amp; e.stopPropagation ) </span><br><span class="line">    &#x2F;&#x2F;因此它支持W3C的stopPropagation()方法 </span><br><span class="line">    e.stopPropagation(); </span><br><span class="line">else </span><br><span class="line">    &#x2F;&#x2F;否则，我们需要使用IE的方式来取消事件冒泡 </span><br><span class="line">    window.event.cancelBubble &#x3D; true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blue.onclick &#x3D; function(e)&#123; </span><br><span class="line">    console.log(&#39;蓝色&#39;);</span><br><span class="line">    console.log(e.target);</span><br><span class="line">    function stopBubble(e); &#x2F;&#x2F;断开冒泡机制链  使得事件不会继续向上传递</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/06/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-正则表达式简介"><a href="#1-正则表达式简介" class="headerlink" title="1. 正则表达式简介"></a>1. 正则表达式简介</h2><h3 id="1-1-什么是正则表达式"><a href="#1-1-什么是正则表达式" class="headerlink" title="1.1 什么是正则表达式"></a>1.1 什么是正则表达式</h3><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<h3 id="1-2-正则表达式的作用"><a href="#1-2-正则表达式的作用" class="headerlink" title="1.2 正则表达式的作用"></a>1.2 正则表达式的作用</h3><ol>
<li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li>
<li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li>
<li>强大的字符串替换能力(替换)</li>
</ol>
<h3 id="1-3-正则表达式的特点"><a href="#1-3-正则表达式的特点" class="headerlink" title="1.3 正则表达式的特点"></a>1.3 正则表达式的特点</h3><ol>
<li>灵活性、逻辑性和功能性非常的强</li>
<li>可以迅速地用极简单的方式达到字符串的复杂控制</li>
<li>对于刚接触的人来说，比较晦涩难懂</li>
</ol>
<h3 id="1-4-正则表达式的测试"><a href="#1-4-正则表达式的测试" class="headerlink" title="1.4 正则表达式的测试"></a>1.4 正则表达式的测试</h3><ul>
<li><p><a href="https://c.runoob.com/front-end/854">在线测试正则</a></p>
</li>
<li><p>工具中使用正则表达式</p>
<ul>
<li><p>sublime/vscode/word</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sublime调试正则</span></span><br><span class="line"><span class="number">1</span>、按command+F(windows:ctrl+f)调出查找面板</span><br><span class="line"><span class="number">2</span>、点击上图中最左侧的『.*』开启正则模式；</span><br><span class="line"><span class="number">3</span>、在查找输入框输入正则匹配的模式（.*）部分即是正则表达式部分</span><br></pre></td></tr></table></figure>
</li>
<li><p>演示替换所有的数字</p>
</li>
</ul>
</li>
</ul>
<h3 id="1-5-正则表达式的组成"><a href="#1-5-正则表达式的组成" class="headerlink" title="1.5 正则表达式的组成"></a>1.5 正则表达式的组成</h3><ul>
<li>普通字符</li>
<li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li>
</ul>
<p>示例演示：</p>
<ul>
<li><code>\d</code> 匹配数字</li>
<li><code>ab\d</code> 匹配 ab1、ab2</li>
</ul>
<h3 id="1-6-元字符串"><a href="#1-6-元字符串" class="headerlink" title="1.6 元字符串"></a>1.6 元字符串</h3><p>通过测试工具演示下面元字符的使用</p>
<h4 id="1-6-1-常用元字符串"><a href="#1-6-1-常用元字符串" class="headerlink" title="1.6.1 常用元字符串"></a>1.6.1 常用元字符串</h4><p>元字符：除了\n之外的其他任意字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符以外的任意单个字符</td>
</tr>
<tr>
<td>^</td>
<td>表示匹配行首的文本(以谁开始)</td>
</tr>
<tr>
<td>$</td>
<td>表示匹配行尾的文本(以谁结束)</td>
</tr>
<tr>
<td>\b</td>
<td>表示单词边界匹配符   what are you</td>
</tr>
</tbody></table>
<h4 id="1-6-2-限定符"><a href="#1-6-2-限定符" class="headerlink" title="1.6.2 限定符"></a>1.6.2 限定符</h4><table>
<thead>
<tr>
<th>限定符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//限定符:限定前面的表达式出现的次数</span></span><br><span class="line">*    表示的是:前面的表达式出现了<span class="number">0</span>次到多次</span><br><span class="line">[a-z][<span class="number">0</span><span class="number">-9</span>]*  小写字母中的任意一个,后面是要么是没有数字的,要么是多个数字的</span><br><span class="line"></span><br><span class="line">+    表示的是:前面的表达式出现了<span class="number">1</span>次到多次</span><br><span class="line">[a-z][<span class="number">9</span>]+    小写字母一个后面最少一个<span class="number">9</span>,或者多个<span class="number">9</span></span><br><span class="line"></span><br><span class="line">?    表示的是:前面的表达式出现了<span class="number">0</span>次到<span class="number">1</span>次,最少是<span class="number">0</span>次,最多<span class="number">1</span>次 。另一个含义:阻止贪婪模式</span><br><span class="line">[<span class="number">4</span>][a-z]?    <span class="number">4</span>后面可以出现a~z，也可以没有</span><br><span class="line"></span><br><span class="line">n&#123;<span class="number">0</span>,&#125; 表示的是n出现了<span class="number">0</span>次到多次,和*一样的</span><br><span class="line">n&#123;<span class="number">1</span>,&#125; 表示的是n出现了<span class="number">1</span>次到多次,和 +一样的</span><br><span class="line">n&#123;<span class="number">0</span>,<span class="number">1</span>&#125; 表示的是n出现了<span class="number">0</span>次到<span class="number">1</span>次,和 ?一样的</span><br><span class="line">n&#123;<span class="number">5</span>,<span class="number">10</span>&#125; 表示的是前面的n出现了<span class="number">5</span>次到<span class="number">10</span>次</span><br><span class="line">n&#123;<span class="number">4</span>&#125;  表示n出现了<span class="number">4</span>次</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span><span class="number">-7</span>] 表示的是<span class="number">1</span>到<span class="number">7</span>之间的任意的一个数字</span><br><span class="line">[a-z] 表示的是:所有的小写的字母中的任意的一个</span><br><span class="line">[A-Z] 表示的是:所有的大写的字母中的任意的一个</span><br><span class="line">[a-zA-Z] 表示的是:所有的字母的任意的一个</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>a-zA-Z] 表示的是: 所有的数字或者是字母中的一个</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br><span class="line"></span><br><span class="line">^ 表示的是以什么开始,或者是取非(取反) </span><br><span class="line">^[<span class="number">0</span><span class="number">-9</span>] 以数字开头</span><br><span class="line">^[a-z] 以小写字母开始</span><br><span class="line">[^<span class="number">0</span><span class="number">-9</span>] 取反,非数字</span><br><span class="line">[^a-z] 非小写字母</span><br><span class="line">[^<span class="number">0</span><span class="number">-9</span>a-zA-Z_] 不再<span class="number">0</span>到<span class="number">9</span> a到z A到Z之间</span><br><span class="line"></span><br><span class="line">$ 表示的是以什么结束   [<span class="number">0</span><span class="number">-9</span>][a-z]$  必须以小写字母结束</span><br></pre></td></tr></table></figure>

<h4 id="1-6-3-其它"><a href="#1-6-3-其它" class="headerlink" title="1.6.3 其它"></a>1.6.3 其它</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\  转义符</span><br><span class="line">|  或者。选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱。</span><br><span class="line">        [0-9]|[a-z] 表示的是要么是一个数字,要么是一个小写的字母</span><br><span class="line">() 分组。[0-9]|([a-z])|[A-Z]         gr(a|e)y匹配gray和grey</span><br><span class="line">        ([0-9])([1-5])([a-z]) 三组, 从最左边开始计算</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-JavaScript-中使用正则表达式"><a href="#2-JavaScript-中使用正则表达式" class="headerlink" title="2. JavaScript 中使用正则表达式"></a>2. JavaScript 中使用正则表达式</h2><h3 id="2-1-创建正则对象"><a href="#2-1-创建正则对象" class="headerlink" title="2.1 创建正则对象"></a>2.1 创建正则对象</h3><p>方式1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\d&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\d&#x27;</span>, <span class="string">&#x27;gi&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>方式2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure>

<p>参数</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局匹配</td>
</tr>
<tr>
<td>gi</td>
<td>全局匹配+忽略大小写</td>
</tr>
</tbody></table>
<h3 id="2-2-正则对象的常用方法"><a href="#2-2-正则对象的常用方法" class="headerlink" title="2.2 正则对象的常用方法"></a>2.2 正则对象的常用方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg.test(<span class="string">&quot;字符串&quot;</span>)  <span class="comment">//查看字符串是否符合指定的正则表达式，返回true和false</span></span><br><span class="line">reg.exec(<span class="string">&quot;字符串&quot;</span>)  <span class="comment">//用正则表达式模式在字符串中运行查找，并返回包含该查找结果的一个数组</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-匹配正则表达式"><a href="#2-3-匹配正则表达式" class="headerlink" title="2.3 匹配正则表达式"></a>2.3 匹配正则表达式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在字符串中查找是否有符合条件的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-zA-Z]+/</span>.test(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/./</span>.test(<span class="string">&quot;除了回车换行以为的任意字符&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.*/</span>.test(<span class="string">&quot;0个到多个&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.+/</span>.test(<span class="string">&quot;1个到多个&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.?/</span>.test(<span class="string">&quot;哈哈&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]/</span>.test(<span class="string">&quot;what&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[A-Z]/</span>.test(<span class="string">&quot;Are&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-zA-Z]/</span>.test(<span class="string">&quot;干啥子&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9a-zA-Z]/</span>.test(<span class="string">&quot;9ebg&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/b|(ara)/</span>.test(<span class="string">&quot;abra&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]&#123;2,3&#125;/</span>.test(<span class="string">&quot;arfsf&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d/</span>.test(<span class="string">&quot;998&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d*/</span>.test(<span class="string">&quot;998&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d+/</span>.test(<span class="string">&quot;998&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;0,&#125;/</span>.test(<span class="string">&quot;998&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,3&#125;/</span>.test(<span class="string">&quot;998&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\D/</span>.test(<span class="string">&quot;eat&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\s/</span>.test(<span class="string">&quot;  &quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\S/</span>.test(<span class="string">&quot;嘎嘎&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\w/</span>.test(<span class="string">&quot;_&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\W/</span>.test(<span class="string">&quot;_&quot;</span>));<span class="comment">//fasle</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-正则匹配案例"><a href="#2-4-正则匹配案例" class="headerlink" title="2.4 正则匹配案例"></a>2.4 正则匹配案例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.查看字符串是否包含数字</span></span><br><span class="line"><span class="comment">//var reg = new RegExp(&quot;\\d+&quot;);</span></span><br><span class="line"><span class="keyword">var</span> reg =<span class="regexp">/\d+/</span>;  <span class="comment">//相比上面写法少了转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test 方法检查在字符串中是否存在一个模式，如果存在则返回 true，否则就返回 false。</span></span><br><span class="line">alert(reg.test(<span class="string">&quot;abc123&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.需求：校验QQ号码</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d&#123;4,10&#125;$/</span>;</span><br><span class="line">alert(reg.test(<span class="string">&quot;11533&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.固定电话的正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(0\d&#123;2,3&#125;-)?[1-9]\d&#123;7&#125;$/</span>;</span><br><span class="line">alert(reg.test(<span class="string">&quot;021-88882222&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.匹配日期</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">&#x27;2015-10-10&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.查看字符串是否以数字开头以数字结束</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d+)$|^(\d+)(.)*(\d+)$/</span>;</span><br><span class="line">alert(reg.test(<span class="string">&quot;abc123&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点：其中^表示开头，$表示结束，/^\d+$/表示需要匹配的字符串必须以数字开头，必须以数字结束。如果去掉，则会进行部分匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.验证中文名字(2到6位)</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[\u4e00-\u9fa5]&#123;2,6&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.需求：找出所有3个英文字母组成的单词</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;da Jia hao hao xue xi zheng qu sheng lii&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b[a-z]&#123;3&#125;\b/ig</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exec 方法:用正则表达式模式在字符串中运行查找，并返回包含该查找结果的一个数组。</span></span><br><span class="line"><span class="keyword">while</span>((line = reg.exec(str)) !=<span class="literal">null</span>)&#123;</span><br><span class="line">      alert(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.把里面所有的数字全部显示出来</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;中国移动:10086,中国联通:10010,中国电信:10000&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d&#123;5&#125;/g</span>;</span><br><span class="line"><span class="comment">//通过正则表达式匹配这个字符串</span></span><br><span class="line"><span class="keyword">var</span> line=reg.exec(str);</span><br><span class="line"><span class="keyword">while</span> (line!=<span class="literal">null</span>)&#123;</span><br><span class="line">   <span class="comment">//输出匹配的内容</span></span><br><span class="line">   <span class="built_in">console</span>.log(line[<span class="number">0</span>]);</span><br><span class="line">   line=reg.exec(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-分组提取"><a href="#2-5-分组提取" class="headerlink" title="2.5 分组提取"></a>2.5 分组提取</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 提取日期中的年部分  2015-5-10</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">&#x27;2016-1-5&#x27;</span>;</span><br><span class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提取邮件中的每一部分</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123123@xx.com&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-字符串中正则的使用"><a href="#3-字符串中正则的使用" class="headerlink" title="3. 字符串中正则的使用"></a>3. 字符串中正则的使用</h2><h3 id="3-1-字符串中支持正则方法"><a href="#3-1-字符串中支持正则方法" class="headerlink" title="3.1 字符串中支持正则方法"></a>3.1 字符串中支持正则方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">match()    <span class="comment">//match方法返回符合条件的集合</span></span><br><span class="line">replace()  <span class="comment">//替换字符串</span></span><br><span class="line">search()   <span class="comment">//查找字符串</span></span><br><span class="line">split()    <span class="comment">//切割字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-字符串正则提取"><a href="#3-2-字符串正则提取" class="headerlink" title="3.2 字符串正则提取"></a>3.2 字符串正则提取</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//match方法返回符合条件的集合</span></span><br><span class="line"><span class="comment">//1.查找字符串中所有连续出现的数字，放入数组</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc123ee23f90&quot;</span>;</span><br><span class="line">alert(str.match(<span class="regexp">/\d+/g</span>));</span><br><span class="line">alert(str.match(<span class="regexp">/\d+/</span>));<span class="comment">//如果这里没有/g，只会找到第一个符合条件的放入数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.查找字符串中所有的数字，放入数组</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;abc123ee23f90&quot;</span>;</span><br><span class="line">alert(str.match(<span class="regexp">/\d/g</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 提取工资</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;张三：1000，李四：5000，王五：8000。&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>); </span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 提取email地址</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com...&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);  <span class="comment">//(\.\w+)?  表示可能出现0次或者多次</span></span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.把里面所有的数字全部显示出来</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;中国移动:10086,中国联通:10010,中国电信:10000&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> array=str.match(<span class="regexp">/\d&#123;5&#125;/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-贪婪模式和懒惰模式"><a href="#3-3-贪婪模式和懒惰模式" class="headerlink" title="3.3 贪婪模式和懒惰模式"></a>3.3 贪婪模式和懒惰模式</h3><p>所谓贪婪匹配就是匹配重复字符是尽可能多的匹配</p>
<p>懒惰模式就是匹配的时候尽可能的少匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;aaaaa&quot;</span>.match(<span class="regexp">/a+/</span>);    <span class="comment">//贪婪模式：[&quot;aaaaa&quot;]</span></span><br><span class="line"><span class="string">&quot;aaaaa&quot;</span>.match(<span class="regexp">/a+?/</span>);   <span class="comment">//懒惰模式(使用?号)：[&quot;a&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;0a123ba123b&#x27;</span>.match(<span class="regexp">/a[a-b0-9]*b/</span>);      <span class="comment">//贪婪模式: [&quot;a123ba123b&quot;]</span></span><br><span class="line"><span class="string">&#x27;0a123ba123b&#x27;</span>.match(<span class="regexp">/a[a-b0-9]*?b/</span>);  <span class="comment">//懒惰模式 ：[&quot;a123b&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照贪婪和懒惰模式，下面的结有问题：</span></span><br><span class="line"><span class="string">&quot;aaab&quot;</span>.match(<span class="regexp">/a+b/</span>);   <span class="comment">//[&quot;aaab&quot;]</span></span><br><span class="line"><span class="string">&quot;aaab&quot;</span>.match(<span class="regexp">/a+?b/</span>);  <span class="comment">//[&quot;aaab&quot;]  这边明明是懒惰模式，可是匹配结果仍然是&quot;aaab&quot;</span></span><br><span class="line"><span class="comment">//原因是正则表达式的模式匹配总是会寻找字符串中第一个可能匹配的位置。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-字符串正则替换"><a href="#3-4-字符串正则替换" class="headerlink" title="3.4 字符串正则替换"></a>3.4 字符串正则替换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 替换所有空白</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;   123AD  asadf   asadfasf  adf &quot;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 替换所有,|，</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc,efg,123，abc,123，a&quot;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.替换字符串中所有的 – 和 + 号</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a-b-+b-c&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/-|\+/g</span>;  <span class="comment">//注意，此处没有加边界匹配器，因为要替换所有的-,g表示匹配的模式,+号需要转义</span></span><br><span class="line">alert(str.replace(reg, <span class="string">&quot;*&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.替换字符串中的所有的帅</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;你好帅哦,真的是太帅了,帅,就是真帅&quot;</span>;</span><br><span class="line">str=str.replace(<span class="regexp">/帅/g</span>,<span class="string">&quot;猥琐&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.替换字符串中的所有的h</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;HhpphH&quot;</span>;<span class="comment">//SSppSS</span></span><br><span class="line">str=str.replace(<span class="regexp">/[h]/gi</span>,<span class="string">&quot;S&quot;</span>);  <span class="comment">//i忽略大小写</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.替换重叠词</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;妮妮好好啊，我好喜喜欢你&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.replace(<span class="regexp">/(.)\1+/g</span>,<span class="string">&quot;$1&quot;</span>)</span><br><span class="line">alert(str1);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//7.替换标签为空字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&lt;p&gt; 你好小明 &lt;/p&gt; &lt;div&gt;王鹏&lt;/div&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;[^&lt;&gt;]+&gt;/g</span>;  <span class="comment">//标签中除了&lt;&gt;不能放，其他都能放，所以是[^&lt;&gt;]</span></span><br><span class="line">alert(str.replace(reg, <span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/正则表达式/bb.png"></p>
<h3 id="3-5-字符串正则其他方法"><a href="#3-5-字符串正则其他方法" class="headerlink" title="3.5 字符串正则其他方法"></a>3.5 字符串正则其他方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.查找字符串中指定字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a-b-b-c&quot;</span>;</span><br><span class="line"><span class="comment">//忽略大小写查找</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;  </span><br><span class="line"><span class="comment">//打印结果是所查找的内容在字符串中出现的第一个位置</span></span><br><span class="line">alert(str.search(reg));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.切割字符串</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;a|b|c|&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="regexp">/\W+/</span>);</span><br><span class="line">alert(arr)</span><br></pre></td></tr></table></figure>

<h3 id="3-6-正则案例：验证密码强度"><a href="#3-6-正则案例：验证密码强度" class="headerlink" title="3.6 正则案例：验证密码强度"></a>3.6 正则案例：验证密码强度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;dv&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;密码&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;pwd&quot;</span> maxlength=<span class="string">&quot;16&quot;</span>&gt;&lt;!--课外话题--&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;em&gt;密码强度：&lt;/em&gt;</span><br><span class="line">        &lt;em id=<span class="string">&quot;strength&quot;</span>&gt;&lt;/em&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;strengthLevel&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;strengthLv0&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;common.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    #dv&#123;</span><br><span class="line">        width: <span class="number">300</span>px;</span><br><span class="line">        height:<span class="number">200</span>px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left:<span class="number">300</span>px;</span><br><span class="line">        top:<span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .strengthLv0 &#123;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">120</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .strengthLv1 &#123;</span><br><span class="line">        background: red;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">40</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .strengthLv2 &#123;</span><br><span class="line">        background: orange;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">80</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .strengthLv3 &#123;</span><br><span class="line">        background: green;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">120</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .strengthLv4 &#123;</span><br><span class="line">        background: black;</span><br><span class="line">        height: <span class="number">6</span>px;</span><br><span class="line">        width: <span class="number">150</span>px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        padding: <span class="number">2</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my$(<span class="string">&quot;pwd&quot;</span>).onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="built_in">this</span>.value;</span><br><span class="line">    <span class="keyword">var</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1.如果输入的内容中函数字  强度是0</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\d+/</span>.test(value))&#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.如果输入的内容含小写字母  强度是1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/[a-z]+/</span>.test(value))&#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.如果输入的内容含大写字母  强度是2</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/[A-Z]+/</span>.test(value))&#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.如果输入的内容含非字符  强度是3</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\W+/</span>.test(value))&#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    my$(<span class="string">&quot;strengthLevel&quot;</span>).className = <span class="string">&quot;strengthLv&quot;</span>+level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-7-正则案例：表单验证"><a href="#3-7-正则案例：表单验证" class="headerlink" title="3.7 正则案例：表单验证"></a>3.7 正则案例：表单验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">QQ号：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txtQQ&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">邮箱：&lt;input type=&quot;text&quot; id=&quot;txtEMail&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">手机：&lt;input type=&quot;text&quot; id=&quot;txtPhone&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">生日：&lt;input type=&quot;text&quot; id=&quot;txtBirthday&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">姓名：&lt;input type=&quot;text&quot; id=&quot;txtName&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">//1.获取页面所有的inputs</span><br><span class="line">var inputs = my$byTagName(&quot;input&quot;);</span><br><span class="line">//2.遍历inputs绑定事件</span><br><span class="line">for(var i=0;i&lt;inputs.length;i++)&#123;</span><br><span class="line">    inputs[i].onblur = function()&#123;</span><br><span class="line">        checkCorrect(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//3.每次文本框失去焦点时候确定文本框对应的正则以及提示</span><br><span class="line">function checkCorrect(ele)&#123;</span><br><span class="line">    var reg = null;</span><br><span class="line">    var tip = null;</span><br><span class="line">    //检验QQ</span><br><span class="line">    if(ele.getAttribute(&quot;name&quot;) == &quot;qq&quot;) &#123;</span><br><span class="line">        reg = /^[1-9]\d&#123;4,10&#125;$/;</span><br><span class="line">        tip = &quot;请输入正确的QQ号码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //校验email</span><br><span class="line">    else if(ele.getAttribute(&quot;name&quot;) == &quot;email&quot;)&#123;</span><br><span class="line">        reg = /^\w+@\w+\.\w+(\.\w+)?$/;</span><br><span class="line">        tip = &quot;请输入正确的email&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(ele.getAttribute(&quot;name&quot;) == &quot;phone&quot;)&#123;</span><br><span class="line">        reg = /^1[34578]\d&#123;9&#125;$/;</span><br><span class="line">        tip = &quot;请输入正确的手机号码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(ele.getAttribute(&quot;name&quot;) == &quot;birthday&quot;)&#123;</span><br><span class="line">        reg = /^((\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;))$/;</span><br><span class="line">        tip = &quot;请输入正确的生日&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(ele.getAttribute(&quot;name&quot;) == &quot;name&quot;)&#123;</span><br><span class="line">        reg = /^\w&#123;2,&#125;$/;</span><br><span class="line">        tip = &quot;请输入正确的名字&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //真正去进行校验</span><br><span class="line">    doCheck(ele,reg,tip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//正则的校验</span><br><span class="line">function doCheck(element, reg, tip)&#123;</span><br><span class="line">    //获取当前input的下一个兄弟元素</span><br><span class="line">    var span = element.nextElementSibling;</span><br><span class="line">    //如果正则校验通过，则输入正确</span><br><span class="line">    if(reg.test(element.value))&#123;</span><br><span class="line">        span.style.color = &quot;green&quot;;</span><br><span class="line">        setInnerText(span,&quot;输入正确&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        span.style.color = &quot;red&quot;;</span><br><span class="line">        setInnerText(span,tip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
  </entry>
  <entry>
    <title>微信公众号开发</title>
    <url>/2019/11/12/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-微信公众号开发"><a href="#1-微信公众号开发" class="headerlink" title="1.微信公众号开发"></a>1.微信公众号开发</h1><h2 id="1-1-公众号分类"><a href="#1-1-公众号分类" class="headerlink" title="1.1 公众号分类"></a>1.1 公众号分类</h2><ul>
<li>微信公众平台是腾讯旗下的一个平台，微信公众平台中有以下三种<a href="https://www.baidu.com/s?wd=%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">微信公众号</a>类型：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、订阅号</span><br><span class="line">2、服务号</span><br><span class="line">3、企业号：企业号多半是企业内容使用，用于管理员工通讯，方便员工通讯，信息集合和消息通知等功能，相当与一个移动的小型oa系统了。一般不用来对外宣传推广</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570007801353.png" alt="1570007801353"></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570007831333.png" alt="1570007831333"></p>
<ul>
<li><p>服务号和订阅号的区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.出现的位置不同</span><br><span class="line">2.单月发送的消息数量不同，订阅号每天1篇，服务号每月4篇</span><br><span class="line">3.订阅号没有9大接口和支付功能</span><br><span class="line">   9大接口包括：语音识别、客服接口、OAuth 2.0网页授权、生成带参数的二维码、获取用户地理位置、获取用户基本信息、获取关注者列表、用户分组接口、上传和下载多媒体文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>微信公众号认证账号和非认证账号的区别：认证账号就是可以在添加好友里根据名字搜索到该账号</p>
</blockquote>
</li>
</ul>
<h2 id="1-2-公众号注册"><a href="#1-2-公众号注册" class="headerlink" title="1.2 公众号注册"></a>1.2 公众号注册</h2><p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570007773539.png" alt="1570007773539"></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570007910010.png" alt="1570007910010"></p>
<h2 id="1-3-微信公众号基本功能"><a href="#1-3-微信公众号基本功能" class="headerlink" title="1.3 微信公众号基本功能"></a>1.3 微信公众号基本功能</h2><h3 id="1-3-1-自动回复"><a href="#1-3-1-自动回复" class="headerlink" title="1.3.1 自动回复"></a>1.3.1 自动回复</h3><p><a href="https://kf.qq.com/faq/161221FZnEfe161221Ibmamq.html">https://kf.qq.com/faq/161221FZnEfe161221Ibmamq.html</a></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570008312002.png" alt="1570008312002"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">收到消息回复在一小时内只能回复一到两条，所有有必要设置关键词回复</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-自定义菜单"><a href="#1-3-2-自定义菜单" class="headerlink" title="1.3.2 自定义菜单"></a>1.3.2 自定义菜单</h3><p><a href="http://classic.getemoji.com/">http://classic.getemoji.com/</a> 可以在这个网址中选择对应的图标，给菜单的名字添加图标</p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570009469509.png" alt="1570009469509"></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570009558069.png" alt="1570009558069"></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570009718993.png" alt="1570009718993"></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1570009813005.png" alt="1570009813005"></p>
<h3 id="1-3-3-投票管理"><a href="#1-3-3-投票管理" class="headerlink" title="1.3.3 投票管理"></a>1.3.3 投票管理</h3><p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576461102561.png" alt="1576461102561"></p>
<p>投票管理需要插入到对应的文章后才能生效</p>
<h3 id="1-3-4-页面模板使用"><a href="#1-3-4-页面模板使用" class="headerlink" title="1.3.4 页面模板使用"></a>1.3.4 页面模板使用</h3><h4 id="a-添加页面模板"><a href="#a-添加页面模板" class="headerlink" title="a) 添加页面模板"></a>a) 添加页面模板</h4><p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576463387072.png" alt="1576463387072"></p>
<h4 id="b-绑定页面模板"><a href="#b-绑定页面模板" class="headerlink" title="b) 绑定页面模板"></a>b) 绑定页面模板</h4><p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576463332280.png" alt="1576463332280"></p>
<h3 id="1-4-公众号后台开发"><a href="#1-4-公众号后台开发" class="headerlink" title="1.4 公众号后台开发"></a>1.4 公众号后台开发</h3><p>除了使用上面所提到的直接在微信公众号后台配置的基本功能之外，微信公众号还允许我们接入后台程序。需要注意的是，一旦后台接入之后，之前的配置会自动失效。</p>
<h4 id="1-4-1-后台接入"><a href="#1-4-1-后台接入" class="headerlink" title="1.4.1 后台接入"></a>1.4.1 后台接入</h4><p><strong>a) 微信公众号后台配置</strong></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576470117197.png" alt="1576470117197"></p>
<p><strong>b) node后台</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> parseString = <span class="built_in">require</span>(<span class="string">&#x27;xml2js&#x27;</span>).parseString;<span class="comment">//引入xml2js包</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&#x27;sha1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    appID: <span class="string">&#x27;wx16b01d87eca9d8f4&#x27;</span>, <span class="comment">//公众号里面取</span></span><br><span class="line">    AppSecret: <span class="string">&#x27;41458d7494fe25ed6d957a7632d72cfa&#x27;</span>, <span class="comment">//公众号里面取</span></span><br><span class="line">    token: <span class="string">&#x27;mytoken1234&#x27;</span> <span class="comment">//自定义的token</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.method)</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> signature = req.query.signature,</span><br><span class="line">            timestamp = req.query.timestamp,</span><br><span class="line">            nonce = req.query.nonce,</span><br><span class="line">            echostr = req.query.echostr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">        <span class="keyword">var</span> arr = [config.token, timestamp, nonce].sort().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// sha1加密    </span></span><br><span class="line">        <span class="keyword">var</span> result = sha1(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(result, signature)</span><br><span class="line">        <span class="keyword">if</span> (result === signature) &#123;</span><br><span class="line">            res.send(echostr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">&#x27;mismatch&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;running....&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>c) 将node后台端口通过ngrok映射到外网</strong></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576470280500.png" alt="1576470280500"></p>
<p><strong>d) 后台接入流程</strong></p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576470380003.png" alt="1576470380003"></p>
<h4 id="1-4-2-回复消息"><a href="#1-4-2-回复消息" class="headerlink" title="1.4.2 回复消息"></a>1.4.2 回复消息</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html">https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html</a></p>
<blockquote>
<p>公众号的接口权限可在后台查询，微信公众号在定义客户端和服务端交互的时候，使用的数据格式是xml。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">  &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;&#x2F;ToUserName&gt;</span><br><span class="line">  &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;&#x2F;FromUserName&gt;</span><br><span class="line">  &lt;CreateTime&gt;12345678&lt;&#x2F;CreateTime&gt;</span><br><span class="line">  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;&#x2F;MsgType&gt;</span><br><span class="line">  &lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;&#x2F;Content&gt;</span><br><span class="line">&lt;&#x2F;xml&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理微信post消息请求 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = [];</span><br><span class="line">        <span class="comment">//监听 data 事件 用于接收数据</span></span><br><span class="line">        req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            buffer.push(data);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//监听 end 事件 用于处理接收完成的数据</span></span><br><span class="line">        req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//输出接收完成的数据</span></span><br><span class="line">            parseString(Buffer.concat(buffer).toString(<span class="string">&#x27;utf-8&#x27;</span>), &#123; <span class="attr">explicitArray</span>: <span class="literal">false</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="comment">//打印错误信息</span></span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//打印解析结果</span></span><br><span class="line">                    <span class="built_in">console</span>.log(result);</span><br><span class="line">                    result = result.xml;</span><br><span class="line">                    <span class="keyword">var</span> toUser = result.ToUserName; <span class="comment">//接收方微信</span></span><br><span class="line">                    <span class="keyword">var</span> fromUser = result.FromUserName;<span class="comment">//发送仿微信</span></span><br><span class="line">                    <span class="keyword">if</span> (result.Event === <span class="string">&#x27;subscribe&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//回复消息</span></span><br><span class="line">                        <span class="keyword">var</span> xml = returntext(fromUser, toUser, <span class="string">&#x27;欢迎关注公众号,hahhh&#x27;</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(xml)</span><br><span class="line">                        res.send(xml)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> xml = returntext(fromUser, toUser, <span class="string">&#x27;您好&#x27;</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(xml)</span><br><span class="line">                        res.send(xml)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//回复文本消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returntext</span>(<span class="params">toUser, fromUser, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xmlContent = <span class="string">&quot;&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[&quot;</span> + toUser + <span class="string">&quot;]]&gt;&lt;/ToUserName&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;FromUserName&gt;&lt;![CDATA[&quot;</span> + fromUser + <span class="string">&quot;]]&gt;&lt;/FromUserName&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;CreateTime&gt;&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">&quot;&lt;/CreateTime&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;Content&gt;&lt;![CDATA[&quot;</span> + content + <span class="string">&quot;]]&gt;&lt;/Content&gt;&lt;/xml&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> xmlContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-重新开启自定义菜单"><a href="#1-4-3-重新开启自定义菜单" class="headerlink" title="1.4.3 重新开启自定义菜单"></a>1.4.3 重新开启自定义菜单</h4><p>当接入公众号后台之后，原来的自定义菜单、回复等功能会失效。如果想自定义菜单和公众号后台同时生效，我们可以在添加功能插件–&gt;自定义菜单中开启。</p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/微信公众号开发/1576469739930.png" alt="1576469739930"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>函数原型</title>
    <url>/2019/09/14/%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、函数声明的实质"><a href="#一、函数声明的实质" class="headerlink" title="一、函数声明的实质"></a>一、函数声明的实质</h2><p>我们平时大量使用Function，但是真的懂Function吗？</p>
<p>声明一个函数的时所使用的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn(num1,num2)&#123;</span><br><span class="line">    return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实它的实质是使用了Function的构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Function(参数1，参数2，...，函数体);</span><br><span class="line">var fn &#x3D; new Function(&#39;num1&#39;,&#39;num2&#39;,&#39;return num1+num2&#39;);</span><br></pre></td></tr></table></figure>

<p>这两种声明方式是等同的，但从第二种写法上，我们可以很清晰的看出fn函数是由Function构造出来的。</p>
<h2 id="二、JavaScript对象"><a href="#二、JavaScript对象" class="headerlink" title="二、JavaScript对象"></a>二、JavaScript对象</h2><p>我们先来看一个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof Object);</span><br><span class="line">console.log(typeof Function);</span><br></pre></td></tr></table></figure>

<p>打印结果都是Function，这是为什么了，为什么Object也是Function？</p>
<p>那是因为<strong>JS中所有的函数都是Function的实例</strong>，Object也是由构造函数构建的，那么Object的类型也是Function。</p>
<p>值得注意的是：<strong>Function自身能够生成自身，即Function的原型就是Function。</strong>即</p>
<p>我们用一张图来解释这其中的关系</p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/函数原型/yuan1.png" alt="函数原型"></p>
<p>结合上一章所介绍的原型链，综合给出一张关系图</p>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/函数原型/yuan2.png" alt="原型链加函数原型"></p>
<p>[声明]：本篇文章中部分引用 <a href="https://blog.csdn.net/swl979623074/article/details/78836767">从Function说原型</a> 的文章。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>js的作用域</title>
    <url>/2020/05/20/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效&#x2F;可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</span><br></pre></td></tr></table></figure>

<p>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。</p>
<h3 id="1-全局作用域（全局变量）"><a href="#1-全局作用域（全局变量）" class="headerlink" title="1.全局作用域（全局变量）"></a>1.全局作用域（全局变量）</h3><p><strong>全局变量，原理就是将变量挂载到window对象中.</strong></p>
<p><strong>全局变量拥有全局的作用域，可在任意地方被调用</strong></p>
<p>全局变量有两种声明方式</p>
<h3 id="（1）函数外部"><a href="#（1）函数外部" class="headerlink" title="（1）函数外部"></a>（1）函数外部</h3><p>(写在函数外面的都是全局变量)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var num &#x3D; 15; &#x2F;&#x2F;全局变量</span><br><span class="line">        function f() &#123;</span><br><span class="line">        var num &#x3D; 10; &#x2F;&#x2F;不是全局变量</span><br><span class="line">            function f2()&#123;</span><br><span class="line">               &#x2F;*----*&#x2F; </span><br><span class="line">            &#125;</span><br><span class="line">            f2();</span><br><span class="line">        &#125;</span><br><span class="line">    f();</span><br><span class="line">    console.log(num); &#x2F;&#x2F;  15</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="（2）函数内部"><a href="#（2）函数内部" class="headerlink" title="（2）函数内部"></a>（2）函数内部</h3><p>(不加var的变量声明，隐式全局变量)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">        num &#x3D; 10; &#x2F;&#x2F;隐式全局变量</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    console.log(num); &#x2F;&#x2F; 10</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="全局变量与隐式全局变量的区别"><a href="#全局变量与隐式全局变量的区别" class="headerlink" title="全局变量与隐式全局变量的区别"></a>全局变量与隐式全局变量的区别</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">隐式全局变量可以通过delete关键字来删除，全局变量不可以</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量不可被delete</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var a &#x3D; 2; &#x2F;&#x2F;全局变量</span><br><span class="line">    function f()&#123;</span><br><span class="line">        &#x2F;&#x2F;****</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">    delete a;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;隐式全局变量被delete</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function f()&#123;</span><br><span class="line">        a &#x3D; 2; &#x2F;&#x2F;隐式全局变量</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;  2</span><br><span class="line">    delete a;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;  not defined (已被删除)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-局部作用域-局部变量"><a href="#2-局部作用域-局部变量" class="headerlink" title="2.局部作用域(局部变量)"></a>2.局部作用域(局部变量)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">局部变量：写在函数体里面的变量</span><br><span class="line"></span><br><span class="line">局部变量只可以在当前函数内部使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">        var num &#x3D; 10; &#x2F;&#x2F;局部变量</span><br><span class="line">        function f2()&#123;</span><br><span class="line">            console.log(num); &#x2F;&#x2F; 10</span><br><span class="line">        &#125;</span><br><span class="line">        f2();</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    console.log(num); &#x2F;&#x2F;  not defined</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h2><p>作用域链简而言之就是，调用变量时，若当前作用域内没有该变量时就向它的上一级作用域去寻找。</p>
<p>Javascript用的是词法作用域（静态作用域）</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;    &#x2F;* 0级作用域 *&#x2F;</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">function aa()&#123;    &#x2F;* 1级作用域 *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;var a &#x3D; 2;</span><br><span class="line">    function bb()&#123;  &#x2F;* 2级作用域 *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;var a &#x3D; 3;</span><br><span class="line">        console.log(a);  &#x2F;&#x2F; 1</span><br><span class="line">    &#125;</span><br><span class="line">    bb();</span><br><span class="line">&#125;</span><br><span class="line">aa();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>作用过程：</p>
<ol>
<li>当运行到console.log(a)时，会在当前作用域（2级作用域）内寻找是否有a可用；</li>
<li>若有直接使用，否则向上一级作用域（1级作用域）去寻找；</li>
<li>此时来到1级作用域，若此时有a可用则用，否则继续向上一级寻找，直到到达0级作用域；</li>
<li>此时来到0级作用域，若此时有a可用则用，否则报错；</li>
</ol>
<p><img src="C:/Users/郑舒耀/Desktop/学习资料/_posts/js的作用域/1.jpg" alt="作用域链"></p>
<p><strong>值得注意的是：作用域链的始发点与函数的调用位置无关，而与函数的声明位置有关</strong> </p>
<p>例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var value &#x3D; 1;</span><br><span class="line">    function foo() &#123;</span><br><span class="line">        console.log(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() &#123;</span><br><span class="line">        var value &#x3D; 2;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">    bar();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>此时的打印结果为1，而不是foo函数调用所在作用域的value = 2；</p>
<p>这里的1是foo函数声明所在的作用域中的value = 1；</p>
<p>## 三、预解析</p>
<p>当浏览器执行Javascript代码时，为了提高执行效率会在代码解释执行前进行预解析处理。</p>
<p>预解析处理规则：</p>
<p>\1. 变量提升 仅仅将变量声明提升到当前作用域的最上面，不包括变量的赋值</p>
<p>\2. 函数提升 将函数的声明提升到当前作用域的最上面，不包括函数的调用 </p>
<p><strong>函数的声明会提前到变量声明之前</strong></p>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;undefined</span><br><span class="line">    var a &#x3D; 10;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>上述代码结果打印为undefined,而不是10，这是为什么呢？</p>
<p>我们来看看与解析之后的结果，</p>
<p>预解析为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var a</span><br><span class="line">    console.log(a);</span><br><span class="line">    a &#x3D; 10;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>由于变量声明被提升到作用域最前端，而赋值没有被提升，导致执行console.log(a);时 a还未被赋值。</p>
<h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f1();</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        &#x2F;*-----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>被解析为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f1() &#123;</span><br><span class="line">        &#x2F;*-----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="函数的声明会提前到变量声明之前"><a href="#函数的声明会提前到变量声明之前" class="headerlink" title="函数的声明会提前到变量声明之前"></a>函数的声明会提前到变量声明之前</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数提升和变量提升同时发生时，函数的声明会提前到变量声明之前。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var a &#x3D; 3;</span><br><span class="line">    function a()&#123;</span><br><span class="line">        console.log(10);</span><br><span class="line">    &#125;   </span><br><span class="line">    console.log(a);</span><br><span class="line">    a();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>被解析为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function a()&#123;</span><br><span class="line">        console.log(10);</span><br><span class="line">    &#125;</span><br><span class="line">    var a;</span><br><span class="line">    a &#x3D; 3</span><br><span class="line">    console.log(a);</span><br><span class="line">    a(); &#x2F;&#x2F;not function  因为此时a为变量而不是函数</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>值得注意的是：</strong></p>
<p>1.函数是可以被打印的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function a()&#123;</span><br><span class="line">    &#x2F;*----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">console.log(a); &#x2F;&#x2F;打印函数a</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>2.变量a的赋值可以被普通类型和函数互相取代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var a；</span><br><span class="line">    a &#x3D; function()&#123;</span><br><span class="line">        &#x2F;*----*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F;打印函数a</span><br><span class="line">    a &#x3D; 1;</span><br><span class="line">    console.log(a); &#x2F;&#x2F; 1；</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数的申明不遵循预解析规则"><a href="#匿名函数的申明不遵循预解析规则" class="headerlink" title="匿名函数的申明不遵循预解析规则"></a>匿名函数的申明不遵循预解析规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f();  &#x2F;&#x2F;报错</span><br><span class="line">    var f &#x3D; function()&#123;</span><br><span class="line">        &#x2F;*----*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>因为解析前后代码相同 执行 <strong>f()</strong> 时，f未被声明为函数类型。</p>
<h3 id="隐式全局变量的注意点"><a href="#隐式全局变量的注意点" class="headerlink" title="隐式全局变量的注意点"></a>隐式全局变量的注意点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    f();</span><br><span class="line">    console.log(a);  &#x2F;&#x2F;undefined</span><br><span class="line">    console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    function f() &#123;</span><br><span class="line">      var a &#x3D; b &#x3D; c &#x3D; 9;</span><br><span class="line">      console.log(a); &#x2F;&#x2F;9</span><br><span class="line">      console.log(b); &#x2F;&#x2F;9</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>被解析为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f() &#123;</span><br><span class="line">      var a;  &#x2F;&#x2F;局部变量</span><br><span class="line">      a &#x3D; 9;  </span><br><span class="line">      b &#x3D; 9;  &#x2F;&#x2F;隐式全局变量</span><br><span class="line">      console.log(a);  &#x2F;&#x2F;9</span><br><span class="line">      console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    console.log(b);  &#x2F;&#x2F;9</span><br><span class="line">    console.log(a);  &#x2F;&#x2F;undefined   因为a是局部变量</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
</search>
